<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Unreal Release Notes</title>
</head>

<body>

<h1>General Information</h1>

<h3>Official Unreal Web Sites</h3>

<ul>
  <li><a href="ReadMe.htm">General Troubleshooting, Hints, Tips &amp; Information</a></li>
  <li><a href="http://www.unreal.com/" target="_parent">Unreal Home Page</a></li>
  <li><a href="http://www.epicgames.com/" target="_parent">Epic MegaGames Home Page</a></li>
  <li><a href="http://unreal.epicgames.com/" target="_parent">Unreal Technology Page</a></li>
</ul>

<h3>Independent Unreal News Sites</h3>

<ul>
  <li><a href="http://www.planetunreal.com/" target="_parent">PlanetUnreal</a></li>
  <li><a href="http://www.unrealnation.net/" target="_parent">Unreal Nation</a></li>
  <li><a href="http://www.unrealuniverse.com/" target="_parent">Unreal Universe</a></li>
</ul>

<h1>Unreal Version 226 Release Notes</h1>

<h3>Known Issues</h3>

<ul>
  <li>People having trouble starting UnrealEd (runtime errors or other trouble) should get
    this fix from the web: <a href="http://unreal.epicgames.com/files/unrealedfix4.exe">UnrealEdFix4.exe</a>.</li>
  <li>Unreal's Direct3D support is only viable on high-end 3D accelerators such as the NVidia
    Riva TNT/TNT2, ATI Rage 128, Matrox G400, and S3 Savage4.&nbsp; It is slower than the
    software-renderer on older cards like the Intel i740, ATI Rage Pro, Riva 128.</li>
</ul>

<h3>Fixes and Improvements</h3>

<h4>Direct3D support</h4>

<ul>
  <li>Newly rewritten code.</li>
  <li>Many improvements and fixes.</li>
  <li>Faster texture management.</li>
  <li>Improved support for switching between windowed and fullscreen rendering.</li>
</ul>

<h4>Networking</h4>

<ul>
  <li>Improved dedicated server performance.</li>
  <li>Fixed packet id wraparound error causing client-side weapons to disappear.</li>
  <li>Fixed packet size overrun causing packets to be lost.</li>
  <li>New DISCONNECT and RECONNECT console commands.</li>
  <li>New server -profilestats command line option for performance monitoring.</li>
</ul>

<h4>Audio</h4>

<ul>
  <li>.EAX hardware 3D sound acceleration is back</li>
  <li>A3D 2.0 hardware 3D sound acceleration is back</li>
  <li>We now support .wav files which use the mono 4-bit-per-sample ADPCM format. Good for
    voice compression.</li>
</ul>

<h1>Unreal Version 225 Release Notes</h1>

<h3>Known Issues</h3>

<ul>
  <li>After setting Advanced Options / Audio / Use3DHardware to enable A3D or EAX support, you
    must exit and restart Unreal for the changes to take effect.</li>
  <li>To take advantage of A3D 3D sound support, you must have the latest version of
    A3DAPI.DLL (currently version 2.14) in your \windows\system directory for A3D support to
    work. The latest A3D drivers can be found at <a
    href="http://www.a3d.com/html/download/drivers/" target="_parent">A3D's Web Site</a>.</li>
</ul>

<h3>Fixes and Improvements</h3>

<h4>General</h4>

<ul>
  <li>Fixed some user maps from past versions of Unreal refusing to load in new versions.</li>
  <li>Optimized cache management code.</li>
</ul>

<h4>Video</h4>

<ul>
  <li>Fixed problem with software renderer playing in a window of size (0,0) under certain
    circumstances.</li>
  <li>Improved Direct3D support, optimized state changes.</li>
  <li>Direct3D settings are now accessible in &quot;advanced options&quot;.</li>
  <li>Fixed occasional texture corruption with antialiased fonts on 3dfx.</li>
</ul>

<h4>Sound</h4>

<ul>
  <li>Creative Labs EAX support is back.</li>
  <li>Aureal A3D support is back.</li>
</ul>

<h4>Input</h4>

<ul>
  <li>Restored keyboard and joystick response to their original settings.</li>
</ul>

<h4>Networking</h4>

<ul>
  <li>Server admins can disable map downloading on their servers (Advanced Options /
    Networking / TcpIp Network Play / AllowDownloads)</li>
  <li>Optimized network code.</li>
  <li>Network visibility traces are now faster and are performed less frequently.</li>
  <li>Faster variable replication.</li>
  <li>Lots of algorithmic optimizations in the net code.</li>
  <li>Fixed potential actor collision checking crash bug in network play.</li>
  <li>Improved intermittent variable replication problem due to incorrect replication
    condition evaluation caching.</li>
  <li>Generalized network serialization of UProperties.</li>
  <li>Smarter packet-size management; improves client smoothness at modem netspeeds.</li>
  <li>STAT NET now shows rpc/c.</li>
  <li>Improved vector quantization compression rate.</li>
  <li>New Actor.NetUpdateFrequency speeds up replication of seldom-changing actors like
    ZoneInfo's and PlayerReplicationInfo's.</li>
</ul>

<h4>Scripting</h4>

<ul>
  <li>Fixed potential crash with switch() statements on strings.</li>
  <li>Fixed potential GetNextInt lockup at end of list.</li>
  <li>Fixed AI lockup in negative-gravity zones.</li>
</ul>

<h4>Installer</h4>

<ul>
  <li>Fixed self-extractor problem with temp directory names containing spaces.</li>
  <li>New SaveIni= option for saving portions of the .ini file.</li>
</ul>

<h4>C++ Changes</h4>

<ul>
  <li>CreateFileReader and CreateFileWriter take bitflags parameter instead of a bunch of
    booleans. New capabilities.</li>
  <li>Fixed appCeilLogTwo bug returning incorrect results on inputs of 256^n+1.</li>
  <li>New &quot;ucc conform&quot; tool.</li>
</ul>

<h1>Unreal Version 224 Release Notes</h1>

<h3>Useful Information</h3>

<ul>
  <li><a href="ReadMe.htm">General Troubleshooting, Hints, Tips &amp; Information</a></li>
  <li><a href="http://www.unreal.com/" target="_parent">Unreal Home Page</a></li>
  <li><a href="http://www.epicgames.com/" target="_parent">Epic MegaGames Home Page</a></li>
  <li><a href="http://unreal.epicgames.com/" target="_parent">Unreal Technology Page</a></li>
</ul>

<h3>Known Issues</h3>

<ul>
  <li>If you enable &quot;Advanced Options / Audio / Use3DHardware&quot; through the menus and
    you have&nbsp; a 3D sound card with Aureal A3D 2.0 drivers, you won't get any sound
    acceleration.&nbsp; A3D 2.0 (geometric environmental audio processing) support is still in
    development and testing, and will come later, but the temporary side effect is that 1.0
    support is disabled.</li>
  <li>When the The Internet server browser (Multiplayer / Join Game), the frame rate is fairly
    slow in the software renderer and on 3dfx Voodoo1 class cards, causing mouse movement to
    be unusually slow.</li>
  <li>There are still Visual Basic runtime issues with UnrealEd, where certain combinations of
    system DLL's and OCX's cause UnrealEd.exe to refuse to launch, or to crash under certain
    conditions in response to the user interface.</li>
  <li>NEC PowerVR support is not functioning in this version.&nbsp; Please use the software
    renderer for now.</li>
</ul>

<h3>Fixes and Improvements</h3>

<h4>General</h4>

<ul>
  <li>Fixed new problem in 220 where users who had performed a partial install of Unreal (with
    maps kept on the CD) didn't see any maps listed in the Deathmatch/BotMatch menus.</li>
  <li>&quot;FOV #&quot; command now takes effect permanently.</li>
  <li>Minigun and stinger sounds are now properly replicated to all clients.</li>
  <li>Botmatch skill bug in 220 fixed.</li>
  <li>Lookspring fixed.</li>
  <li>Kevlar vest pickup sound and dead guy in Vortex Rikers sound fixed.</li>
  <li>Bubbles now float properly on clients.</li>
  <li>Fixed projectiles not appearing on client side because local player ran into them.</li>
  <li>Carcasses are now simulated for smoother death animations, and all the nali and skaarj
    gibs are properly replicated.</li>
  <li>Fixed bug where quick taps of fire button didn't register in network games.</li>
  <li>Slightly reduced damage multiplier in Hardcore mode (150% instead of 170%), and rocket
    damage radius in Classic mode is back to the old value.</li>
  <li>Fixed razorjack sound crash problem with 3D sound.</li>
  <li>Fixed problem where the editor light torches were showing up in some levels in network
    play.</li>
  <li>Fixed client prediction going through portals.</li>
  <li>Eliminated menu bar when playing in windowed mode.</li>
  <li>Fixed inability to join a network game while you are running a non-dedicated server.</li>
</ul>

<h4>Video</h4>

<ul>
  <li>Fixed menu bar disappearing when switching from Glide to the software renderer.</li>
  <li>Fixed potential crash while taking screenshots on 3dfx.</li>
  <li>Works properly on Voodoo3. Voodoo3 support was broken in Unreal 209 through 220.</li>
  <li>Supports compressed S3TC textures (though there aren't any in Unreal 1).</li>
</ul>

<h4>OpenGL Beta Driver</h4>

<ul>
  <li>New, rewritten OpenGL driver.</li>
  <li>Works quite well on the Riva TNT. Important: you need the latest TNT Detonator drivers
    from NVidia's web site for this to work.</li>
  <li>Other cards are in the early testing phase now. Don't expect a lot. We can't provide
    support for getting Unreal OpenGL running on other cards or answer questions about them at
    this time. </li>
</ul>

<h4>Networking</h4>

<ul>
  <li>Fixed remote administration (didn't accept password).</li>
  <li>Fixed administrator &quot;Kick &lt;playername&gt;&quot; crash.</li>
  <li>Fixed dedicated server potential crash when player limit is reached.</li>
  <li>Added &quot;userini=&lt;inifilename&gt;&quot; command-line parameter to set user
    configuration file.</li>
  <li>Added server-side demo recording - currently in alpha state. You can record demos in
    botmatch or on a dedicated or non-dedicated server. Demos can be played back from any
    perspective. To record a demo, type <i>DEMOREC filename</i> at the console. Stop recording
    or playback with the <i>STOPDEMO</i> command. <i>DEMOPLAY filename</i> will play back the
    demo.</li>
  <li>The Unreal Server Browser (UBrowser) is included, and is available under Join Game in
    the Multiplayer menu.</li>
</ul>

<h4>Scripting</h4>

<ul>
  <li>Fixed &quot;Unreal -make&quot; lockup with class names over 32 characters.</li>
  <li>The new keyword &quot;native&quot; is now synonymous with &quot;intrinsic&quot;, and the
    Unreal 1 scripts have been updated to reflect this.</li>
  <li>In network play, on the client side, static functions are always called locally and
    never sent across the network, regardless of the calling actor's replication statements.</li>
  <li>Fixed compiler logic error which caused bool variables within structs to appear to
    always be zero.</li>
  <li>Removing &quot;abstract&quot; keyword from a class and recompiling now works.</li>
  <li>Player classes with no mesh no longer hard-coded to use name &quot;Spectator&quot; in
    mesh menu.&nbsp; Instead, the pawn MenuName attribute is used as the string representation
    for all playerpawn classes.</li>
  <li>All strings are now dynamically sized, meaning there is no longer any limit to their
    length.&nbsp; Declaring strings with the syntax &quot;string[255]&quot; is now obsolete;
    just use &quot;string&quot;.</li>
  <li>The Chr() function converts generates a one-character string whose first character is
    the ASCII/Unicode value you specify. Exception: Chr(0) returns a zero-length string.</li>
  <li>The Asc() function returns the ASCII/Unicode character code of the first character of
    the string you specify, or 0 if the string is empty.</li>
  <li>New array&lt;type&gt; construct for defining dynamically sizable arrays.&nbsp; This is
    only implemented for configuration loading and C++ access; dynamic arrays aren't
    accessible by script yet.</li>
  <li>Fixed broken EDITACTOR console command.</li>
  <li>Actor class now contains MultiSkins array enabling multiple skins to be applied to
    meshes. Not used in any Unreal 1 classes, though. Will be exploited in Unreal Tournament.</li>
  <li>New string concatenation operator &quot;@&quot; concatenates two strings (like
    &quot;$&quot;) but adds a space between them (unlike &quot;$&quot;).</li>
  <li>Actors were previously being ticked (updated) two times between initial spawn and
    rendering. Now they are only ticked once.</li>
  <li>Improved &quot;OBJ REFS&quot; console command not only shows who references the
    specified object, but also shows the shortest reference path from the &quot;root set&quot;
    to the object, so you can see why the object isn't being garbage collected. Very useful
    for tracking down extraneous objects in order to reduce memory usage.</li>
</ul>

<h4>Installer</h4>

<ul>
  <li>Reduced virtual memory usage (was unreasonably high).</li>
  <li>Progress window is now updated as the patch installs.</li>
  <li>New standalone installer.</li>
  <li>Supports selectable groups.</li>
  <li>Supports partial installation.</li>
  <li>Supports mod installation.</li>
  <li>Supports mod uninstallation.</li>
</ul>

<h4>C++ General Changes</h4>

<ul>
  <li>Changed &quot;INTRINSIC&quot; macro to &quot;DECLARE_FUNCTION&quot;, and
    &quot;AUTOREGISTER_INTRINSIC&quot; to &quot;IMPLEMENT_FUNCTION&quot; (to follow the
    convention set by DECLARE_CLASS and IMPLEMENT_CLASS).</li>
  <li>Changed all occurances of &quot;intrinsic&quot; to &quot;native&quot; (moving toward the
    Java convention).</li>
  <li>Moved FBitReader, FBitWriter archives to Core.</li>
  <li>Improved generality of appCeilLogTwo.</li>
  <li>Command-line compiler is now invoked with &quot;ucc make&quot; rather than the old
    &quot;unreal -make&quot;. This is now a non-windowed, command-line application. You can
    run it as an external tool through Visual C++, and direct the outputs to the results
    window. This is the preferred mode of operation, because the compiler now outputs error
    messages in Visual C++'s standard error format, enabling you to double-click on the error
    message in the VC++ IDE and jump right to the error.</li>
  <li>The compiler now generates warnings when you do things that are dangerous but non-fatal,
    for example using &quot;#exec&quot; commands to import non-existant files.</li>
  <li>All UnrealScript strings are now represented internally as FString structures, which
    manage dynamic, variable-length, infinitey-expandable strings.&nbsp; This impacts all
    auto-generated C++ headers such as EngineClasses.h.</li>
  <li>Static functions are always called in network play, regardless of their replication and
    simulatedness.</li>
  <li>Warning: Strings greater than approximately 400 characters won't be replicated in
    network play. They won't fit in packets.</li>
  <li>UnrealScript interpretter has been modified, improved, and optimized to handle data
    types which need to be dynamically constructed and destructed on the stack frame, such as
    dynamic strings (now) and dynamic arrays (coming later).</li>
  <li>Improved and generalized TMap, a template for mapping arbitrary keys to arbitrary
    values. Considering exposing to UnrealScript later.</li>
  <li>appAlloca works like the ANSI C alloca. Useful for allocating temporary memory on stack.</li>
  <li>New data compression infrastructure is under development in FCodec.h.</li>
  <li>New UCommandlet base class for exposing new &quot;command line applets&quot; through
    ucc.exe.&nbsp; UCommandlet supports both C++ classes (see FCommandletMake for example) and
    UnrealScript classes (see CommandletHelloWorld.uc for example).&nbsp; Read the comments in
    CommandletHelloWorld.uc for information about how to implement these.</li>
  <li>&quot;ucc master&quot; master disk builder (not yet documented).</li>
  <li>Localized installer/uninstaller.</li>
  <li>Improved and generalized &quot;texture detail&quot; options.&nbsp; When importing
    textures with &quot;#exec texture import...&quot;, the new LODSET= option specifies which
    detail set the texture should belong to: 0=always render at its highest detail, 1=render
    with user's &quot;world detail&quot; setting, 2=render with user's &quot;skin detail&quot;
    setting.</li>
  <li>Meshes now support full level-of-detail rendering; see the <a
    href="http://unreal.epicgames.com/LODTechnologyNotes.htm" target="_parent">Level of Detail
    Technology</a> page for info.</li>
  <li>New TrueType font importing support.</li>
  <li>Improved and generalized UFactory/UExporter object importing and exporting; not
    currently being used for much, but will be a centerpiece of the upcoming UnrealEd rewrite.</li>
  <li>File management is now handled 100% through the GFileManager object; file reading and
    writing now is done through FArchive objects returned by FFileManager::CreateFileReader
    and FFileManager::CreateFileWriter.&nbsp; The old appFopen, appFclose, etc functions have
    been eliminated.&nbsp; This extends Unreal's file reading and writing in a very general
    way; now all operations dealing with internal and external storage use the same interface,
    making modules more interchangable.&nbsp; Going 100% with this approach could be a painful
    upgrade for code which is very external file-intensive, but you can always #include
    &lt;stdio.h&gt; and use the ANSI file functions if pressed for time.</li>
</ul>

<h4>C++ Unicode Changes</h4>

<ul>
  <li>All the C++ code now compiles under Unicode by default. </li>
  <li>ANSICHAR=8-bit signed ANSI character.</li>
  <li>UNICHAR=16-bit unsigned Unicode character.</li>
  <li>TCHAR=Either ANSICHAR or UNICHAR depending on compile options; currently always UNICHAR.</li>
  <li>All of the Visual C++ projects define UNICODE and _UNICODE.</li>
  <li>Since Windows 95/98 do not support most of the Windows API Unicode entry points, there
    are a lot of checks of the variable GUnicodeOS which is 0 when running the Unicode version
    of Unreal on a non-Unicode OS like Windows 95/98. There are also macros like TCHAR_CALL_OS
    which calll the appropriate ANSI/Unicode function depending on OS support.</li>
  <li>ATcpLink and AUdpLink text exchange functions use ANSI text exclusively.</li>
</ul>

<h4>UnrealScript Windowing System (UWindow)</h4>

<ul>
  <li>The UWindow windowing system is included.</li>
  <li>The UBrowser (Unreal Server Browser) provides a good example of how to use the UWindow
    classes, should mod-makers be interested in the UT user interface system.</li>
</ul>

<h4>Unreal Server Browser</h4>

<ul>
  <li>UBrowser filters servers into various pages based on gametype, and compatibility with
    224. While the majority of servers are of older versions of Unreal, it might take 30
    seconds before you see any servers listed in the 224 or gametype-specific tabs. Check the
    &quot;All Servers&quot; tab to see all servers including incompatible older versions of
    Unreal. </li>
  <li>Press your F5 key to refresh the server list, or right click and choose
    &quot;Refresh&quot;. </li>
  <li>You can disable the Unreal server browser and use the old multiplayer menus by
    commenting editing your Unreal.ini and removing the semicolon at in the line which reads
    &quot;;Console=Engine.Console&quot;, and adding a semicolon in the front of the line which
    reads &quot;Console=UBrowser.UBrowserConsole&quot;.</li>
  <li>You can configure which tabs appear on the server browser (and what they contain) by
    editing your Unreal.ini. The [UBrowser.UBrowserMainClientWindow] section contains all the
    parameters which describe what appears in which tab.</li>
  <li>To change the number of servers which are pinged simultaneously from the default of 10,
    add an entry in Unreal.ini like the following:</li>
  <li>[UBrowser.UBrowserServerList] </li>
  <li>MaxSimultaneousPing=5 </li>
</ul>

<h3>End</h3>

<h1>Unreal Version 223 Release Notes</h1>

<h3>Useful Information</h3>

<ul>
  <li><a href="ReadMe.htm">General Troubleshooting, Hints, Tips &amp; Information</a></li>
  <li><a href="http://www.unreal.com/" target="_parent">Unreal Home Page</a></li>
  <li><a href="http://www.epicgames.com/" target="_parent">Epic MegaGames Home Page</a></li>
  <li><a href="http://unreal.epicgames.com/" target="_parent">Unreal Technology Page</a></li>
</ul>

<h3>Fixes and Improvements</h3>

<h4>General</h4>

<ul>
  <li>Fixed new problem in 220 where users who had performed a partial install of Unreal (with
    maps kept on the CD) didn't see any maps listed in the Deathmatch/BotMatch menus.</li>
  <li>&quot;FOV #&quot; command now takes effect permanently.</li>
  <li>Minigun and stinger sounds are now properly replicated to all clients.</li>
  <li>Botmatch skill bug in 220 fixed.</li>
  <li>Lookspring fixed.</li>
  <li>Kevlar vest pickup sound and dead guy in Vortex Rikers sound fixed.</li>
  <li>Bubbles now float properly on clients.</li>
  <li>Fixed projectiles not appearing on client side because local player ran into them.</li>
  <li>Carcasses are now simulated for smoother death animations, and all the nali and skaarj
    gibs are properly replicated.</li>
  <li>Fixed bug where quick taps of fire button didn't register in network games.</li>
  <li>Slightly reduced damage multiplier in Hardcore mode (150% instead of 170%), and rocket
    damage radius in Classic mode is back to the old value.</li>
  <li>Fixed razorjack sound crash problem with 3D sound.</li>
  <li>Fixed problem where the editor light torches were showing up in some levels in network
    play.</li>
  <li>Fixed client prediction going through portals.</li>
  <li>Eliminated menu bar when playing in windowed mode.</li>
  <li>Fixed inability to join a network game while you are running a non-dedicated server.</li>
</ul>

<h4>Video</h4>

<ul>
  <li>Fixed menu bar disappearing when switching from Glide to the software renderer.</li>
  <li>Fixed potential crash while taking screenshots on 3dfx.</li>
  <li>Works properly on Voodoo3. Voodoo3 support was broken in Unreal 209 through 220.</li>
</ul>

<h4>OpenGL Beta Driver</h4>

<ul>
  <li>New, rewritten OpenGL driver.</li>
  <li>Works quite well on the Riva TNT. Important: you need the latest TNT Detonator drivers
    from NVidia's web site for this to work.</li>
  <li>Other cards are in the early testing phase now. Don't expect a lot. We can't provide
    support for getting Unreal OpenGL running on other cards or answer questions about them at
    this time. </li>
</ul>

<h4>Networking</h4>

<ul>
  <li>Fixed remote administration (didn't accept password).</li>
  <li>Fixed administrator &quot;Kick &lt;playername&gt;&quot; crash.</li>
  <li>Fixed dedicated server potential crash when player limit is reached.</li>
  <li>Added &quot;userini=&lt;inifilename&gt;&quot; command-line parameter to set user
    configuration file.</li>
  <li>Added server-side demo recording - currently in alpha state. You can record demos in
    botmatch or on a dedicated or non-dedicated server. Demos can be played back from any
    perspective. </li>
  <li>The Unreal Server Browser (UBrowser) is included. </li>
</ul>

<h4>Scripting</h4>

<ul>
  <li>Fixed &quot;Unreal -make&quot; lockup with class names over 32 characters.</li>
  <li>The new keyword &quot;native&quot; is now synonymous with &quot;intrinsic&quot;, and the
    Unreal 1 scripts have been updated to reflect this.</li>
  <li>In network play, on the client side, static functions are always called locally and
    never sent across the network, regardless of the calling actor's replication statements.</li>
  <li>Fixed compiler logic error which caused bool variables within structs to appear to
    always be zero.</li>
  <li>Removing &quot;abstract&quot; keyword from a class and recompiling now works.</li>
  <li>Player classes with no mesh no longer hard-coded to use name &quot;Spectator&quot; in
    mesh menu.&nbsp; Instead, the pawn MenuName attribute is used as the string representation
    for all playerpawn classes.</li>
  <li>All strings are now dynamically sized, meaning there is no longer any limit to their
    length.&nbsp; Declaring strings with the syntax &quot;string[255]&quot; is now obsolete;
    just use &quot;string&quot;.</li>
  <li>The Chr() function converts generates a one-character string whose first character is
    the ASCII/Unicode value you specify. Exception: Chr(0) returns a zero-length string.</li>
  <li>The Asc() function returns the ASCII/Unicode character code of the first character of
    the string you specify, or 0 if the string is empty.</li>
  <li>New array&lt;type&gt; construct for defining dynamically sizable arrays.&nbsp; This is
    only implemented for configuration loading and C++ access; dynamic arrays aren't
    accessible by script yet.</li>
  <li>Fixed broken EDITACTOR console command.</li>
  <li>Actor class now contains MultiSkins array enabling multiple skins to be applied to
    meshes. Not used in any Unreal 1 classes, though. Will be exploited in Unreal Tournament.</li>
  <li>New string concatenation operator &quot;@&quot; concatenates two strings (like
    &quot;$&quot;) but adds a space between them (unlike &quot;$&quot;).</li>
</ul>

<h4>Installer</h4>

<ul>
  <li>Reduced virtual memory usage (was unreasonably high).</li>
  <li>Progress window is now updated as the patch installs.</li>
  <li>New standalone installer.</li>
  <li>Supports selectable groups.</li>
  <li>Supports partial installation.</li>
  <li>Does not yet support user mod installation.&nbsp; Probably will happen along with Unreal
    Tournament.</li>
</ul>

<h4>C++ General Changes</h4>

<ul>
  <li>Changed &quot;INTRINSIC&quot; macro to &quot;DECLARE_FUNCTION&quot;, and
    &quot;AUTOREGISTER_INTRINSIC&quot; to &quot;IMPLEMENT_FUNCTION&quot; (to follow the
    convention set by DECLARE_CLASS and IMPLEMENT_CLASS).</li>
  <li>Changed all occurances of &quot;intrinsic&quot; to &quot;native&quot; (moving toward the
    Java convention).</li>
  <li>Moved FBitReader, FBitWriter archives to Core.</li>
  <li>Improved generality of appCeilLogTwo.</li>
  <li>Command-line compiler is now invoked with &quot;ucc make&quot; rather than the old
    &quot;unreal -make&quot;. This is now a non-windowed, command-line application. You can
    run it as an external tool through Visual C++, and direct the outputs to the results
    window. This is the preferred mode of operation, because the compiler now outputs error
    messages in Visual C++'s standard error format, enabling you to double-click on the error
    message in the VC++ IDE and jump right to the error.</li>
  <li>The compiler now generates warnings when you do things that are dangerous but non-fatal,
    for example using &quot;#exec&quot; commands to import non-existant files.</li>
  <li>All UnrealScript strings are now represented internally as FString structures, which
    manage dynamic, variable-length, infinitey-expandable strings.&nbsp; This impacts all
    auto-generated C++ headers such as EngineClasses.h.</li>
  <li>Static functions are always called in network play, regardless of their replication and
    simulatedness.</li>
  <li>Warning: Strings greater than approximately 400 characters won't be replicated in
    network play. They won't fit in packets.</li>
  <li>UnrealScript interpretter has been modified, improved, and optimized to handle data
    types which need to be dynamically constructed and destructed on the stack frame, such as
    dynamic strings (now) and dynamic arrays (coming later).</li>
  <li>Improved and generalized TMap, a template for mapping arbitrary keys to arbitrary
    values. Considering exposing to UnrealScript later.</li>
  <li>appAlloca works like the ANSI C alloca. Useful for allocating temporary memory on stack.</li>
</ul>

<h4>C++ Unicode Changes</h4>

<ul>
  <li>All the C++ code now compiles under Unicode by default. </li>
  <li>ANSICHAR=8-bit signed ANSI character.</li>
  <li>UNICHAR=16-bit unsigned Unicode character.</li>
  <li>TCHAR=Either ANSICHAR or UNICHAR depending on compile options; currently always UNICHAR.</li>
  <li>All of the Visual C++ projects define UNICODE and _UNICODE.</li>
  <li>Since Windows 95/98 do not support most of the Windows API Unicode entry points, there
    are a lot of checks of the variable GUnicodeOS which is 0 when running the Unicode version
    of Unreal on a non-Unicode OS like Windows 95/98. There are also macros like TCHAR_CALL_OS
    which calll the appropriate ANSI/Unicode function depending on OS support.</li>
  <li>ATcpLink and AUdpLink text exchange functions use ANSI text exclusively.</li>
</ul>

<h4>UnrealScript Windowing System (UWindow)</h4>

<ul>
  <li>The UWindow windowing system is included.</li>
  <li>The UBrowser (Unreal Server Browser) provides a good example of how to use the UWindow
    classes, should mod-makers be interested in the UT user interface system.</li>
</ul>

<h1>Unreal Version 220 Release Notes</h1>

<h3>Installation Notes</h3>

<p>Unzip this patch into your \Unreal\System directory, overwriting any existing files.</p>

<p>The first time you run the upgraded version of Unreal, you will be asked to put your
Unreal CD in the drive.&nbsp; This step is required because files must be loaded off the
CD during the patching process.&nbsp; Make sure you have your original Unreal retail CD
handy before installing the patch.</p>

<p>After installing the patch, you will need to reconfigure your Unreal settings such as
your keyboard configuration, 3D hardware, and resolution.&nbsp; However, your savegames
will not be lost; savegames from previous versions will work properly.</p>

<h3>Improvements for Gamers</h3>

<h4>Multiplayer Improvements</h4>

<ul>
  <li>Player movements are now compressed with a predictor-corrector scheme, allowing for
    smoother movement of enemies. </li>
  <li>New multiplayer game styles, including Classic, Hardcore, and Turbo, can be selected
    from the game options menu. </li>
  <li>Fixed player and spectator counts. </li>
  <li>Fixed becoming ghost when killed while starting to feign death. </li>
  <li>Spectators can now see the scoreboard. </li>
  <li>Spectators can cycle through other player views by pressing fire, and return to their
    own view using the alt-fire button. </li>
  <li>Spectators can go through portals. </li>
  <li>Fixed support for multiple skin .int files (now can add user skins in new utx files
    without breaking compatibility). </li>
  <li>Improved team scoreboard.</li>
  <li>Skin and mesh selection always remembered.</li>
  <li>Spectators not shown in the scoreboard.</li>
  <li>Skaarj player swimming and dodge roll animations played correctly.</li>
  <li>In team games, players properly start at appropriate playerstarts in levels where
    playerstarts are marked for specific teams.</li>
  <li>Fixed King of the Hill gameplay bugs.</li>
  <li>Fixed jumpboot respawning problem.</li>
  <li>&nbsp;</li>
</ul>

<h4>Internet Play</h4>

<ul>
  <li>Improved bandwidth usage for temporary effects like projectiles. </li>
  <li>Player movements are now compressed with a predictor-corrector scheme, allowing for
    smoother movement of enemies. </li>
  <li>Movers are simulated client-side, and players based on movers have their location
    updated by the server relative to the mover position.&nbsp; This allows smooth mover
    movement prediction on the client. </li>
  <li>Optional game password can be set to limit access to a server.&nbsp; Clients can enter
    the administrator or game password from the player selection menu. </li>
  <li>Fixed &quot;little chess piece&quot; cheat and some other security holes..&nbsp; </li>
</ul>

<h4>Server</h4>

<ul>
  <li>Fixed remote administration (see <a
    href="file://C:\WINNT\Profiles\Administrator\Local/ServerTips.htm">Server Tips</a> for
    information). </li>
  <li>Remote administrators can finally execute console commands on the server. </li>
  <li>The &quot;AllowAdmin&quot; setting is no longer used.&nbsp; To make your server remotely
    manageable, just set the &quot;AdminPassword&quot; in &quot;Advanced Options / Game
    Settings&quot;.</li>
</ul>

<h4>Rendering</h4>

<ul>
  <li>&quot;TIMEDEMO 1&quot; command provides frames-per-second statistics at any time. If
    started during the flyby sequence, it provides statistics for exactly one loop of the
    flyby, for comparison to other systems. &nbsp; &quot;TIMEDEMO 0&quot; turns it off. Thanks
    to Jack &quot;Mek&quot; Porter for integrating the code. </li>
</ul>

<h4>Player Controls</h4>

<ul>
  <li>bFreelook</li>
  <li>FOV snaps back to modified value.</li>
  <li>Optional mouse smoothing.</li>
  <li>GetWeapon console command can be used to bind any key to a specific weapon.</li>
  <li>Added weapon flash effects, and option to turn them off.</li>
  <li>Fixed centerview problem.</li>
</ul>

<h4>Single Player</h4>

<ul>
  <li>Fixed problem where splashes didn't play on some levels. </li>
  <li>Fixed problem where a healing zone reduced your health to 100 if it was above 100. </li>
  <li>Fixed problem where pickups like the shieldbelt were de-activated after a level change. </li>
  <li>Improved the &quot;Advanced Options&quot; screen. </li>
  <li>Fixed problem with scuba gear interfering with armor.</li>
  <li>Crucified nali is solid.</li>
</ul>

<h4>BotMatch</h4>

<ul>
  <li>Bots have greatly improved understanding of how to use lifts, and how to use triggered
    doors and lifts.</li>
  <li>Bots never get frozen after dying.</li>
  <li>Fixed bug where bots would disappear from the game.</li>
  <li>Bots have a better understanding of how to do the ASMD combo move and other weapon
    special moves.</li>
  <li>Improved navigation code for swimming, jumping up onto ledges.</li>
</ul>

<h4>Coop games</h4>

<ul>
  <li>Listen server player weapons travel from level to level.</li>
  <li>Fixed weird movement problem in open areas on fast machines during coop play.</li>
  <li>Translocator works properly in coop play, and everyone gets one.</li>
</ul>

<h3>Improvements for Level Designers</h3>

<h4>LevelInfo</h4>

<ul>
  <li>Added bHumansOnly to specify whether only &quot;human&quot; player pawns are allowed in
    this level. </li>
  <li>Added bNoCheating to specify whether certain client actions, like turning lighting off
    or using a non-standard console, are allowed. </li>
</ul>

<h4>ZoneInfo</h4>

<ul>
  <li>Added bNoInventory to specify whether inventory is allowed to exist in this zone. &nbsp;
    If true, then any inventory in this zone not being carried by a pawn is destroyed. </li>
</ul>

<h4>AI</h4>

<ul>
  <li>Added &quot;LiftTrigger&quot; variable to LiftCenter and LiftExit.</li>
  <li>Added &quot;ExtraCost&quot; to NavigationPoint.</li>
  <li>Added &quot;bOneWayPath&quot; to navigationpoint.</li>
</ul>

<h3>Changes and Improvements for Script Programmers</h3>

<h4>Script Compiler</h4>

<ul>
  <li>When defining a class that contains configurable variables, you can now specify whether
    the configuration should be stored in Unreal.ini or User.ini:<ul>
      <li>class MyClass expands SuperClass config(System); // Class should use system
        configuration (Unreal.ini) -- the default.</li>
      <li>class MyClass expands SuperClass config(User); // Class should use user configuration
        (User.ini).</li>
      <li>class MyClass expands SuperClass config(MyMod); // Class should use a mod-specific
        configuration file named &quot;MyMod.ini&quot;.</li>
      <li>Default &quot;System&quot; variables are stored in Default.ini.</li>
      <li>Default &quot;User&quot; variables are stored in the new file DefUser.ini.</li>
    </ul>
  </li>
  <li>You can now refer to literal objects by by their package name, for example
    texture'UnrealI.Skins.MySkin' -- this used to cause a compiler error.</li>
</ul>

<h4>Networking</h4>

<ul>
  <li>Added bNetTemporary for temporary, simulated actors like projectile: Improves bandwidth
    usage.&nbsp; If you set bNetTemporary=true for any of your projectiles or special-effects
    actors, you need to destroy the actor on the client side, either by setting a LifeSpan, or
    destroying it in a simulated function.&nbsp; In 219, all actors were destroyed
    automatically by&nbsp; the server.&nbsp; In 220, bNetTemporary=true actors must be
    destroyed by the client. </li>
  <li>Use bNetOptional for purely gratuitous effects that can be skipped if not enough
    bandwidth is available, such as smoke puffs.&nbsp; bNetOptional=true actors are only sent
    to the client if there is spare bandwidth; they never suck bandwidth away from
    bNetOptional=false actors. </li>
  <li>Use bAlwaysRelevent to force an actor to always be sent to the client.&nbsp; For
    example, we have bAlwaysRelevent=true on our PlayerReplicationInfo actors, so they are
    always replicated to the client.&nbsp; </li>
  <li>Fixed PreLogin function being passed just the ?option=value strings rather than the full
    URL. </li>
</ul>

<h4>Single-player</h4>

<ul>
  <li>Fixed TravelPreAccept/TravelPostAccept not being called. </li>
</ul>

<h4>Mods</h4>

<ul>
  <li>You can now place &quot;exec&quot; functions in GameInfo subclasses, and Inventory
    subclasses.&nbsp; &quot;exec&quot; functions are searched for in the following order, with
    the first match called and the others ignored: The PlayerPawn actor itself, then all the
    items in the player's inventory, then Level.GameInfo.&nbsp; In addition, you can use
    GameInfo &quot;exec&quot; commands through the Unreal server console. </li>
  <li>The menu lists for available game classes, player classes, bot classes, and weapon
    classes are now loaded each time the menu is opened from the .int files.&nbsp; To add new
    items to these lists, reference them in a .int file associated with your mod. </li>
  <li>The GetNextInt() intrinsic function is used to read entries from the .int files. </li>
  <li>Mod makers can now import Windows fonts for use in HUDs. This only works well for
    true-type fonts. Use an exec command with this syntax: <i>#exec Font ImportTTF Name=MyFont
    Font=&quot;Arial&quot; Height=12</i> . When the package file is rebuilt with <i>Unreal
    -make</i>, a new font Texture'MyFont' which is 12 pixels high will be available. The font
    is monochrome and can be set to any color when it is drawn on the HUD. Questions on this
    to <a href="mailto:jack@epicgames.com">jack@epicgames.com</a>.</li>
  <li>You can now have a custom .ini file for your mod's configuration; see the &quot;Script
    Compiler&quot; notes above.</li>
</ul>

<h4>Separation of player and system configuration</h4>

<ul>
  <li>The new User.ini now contains all user-specific Unreal settings such as the keyboard and
    mouse configuration.</li>
  <li>Unreal.ini only contains system-wide options.</li>
  <li>Default.ini contains default values for everything in both User.ini and Unreal.ini.</li>
  <li>If you're going to a LAN party and want to bring your configuration with you, just bring
    User.ini.</li>
</ul>

<h4>Heads Up Display</h4>

<ul>
  <li>The HUD is now responsible for drawing its owner's weapon.&nbsp; A local player's HUD
    RenderOverlays() function is called every tick.&nbsp; It calls the RenderOverlays()
    function for its owner's weapon (and potentially other actors).&nbsp; RenderOverlays() is
    called before the view flash and fog is applied, unlike PostRender().&nbsp; As a result,
    InvCalcView() was no longer needed and was removed from Inventory.</li>
</ul>

<h4>Messages</h4>

<ul>
  <li>ClientMessage has been rewritten to take an optional message type and optional message
    beep boolean.&nbsp; The message type can be used to determine how the message is displayed
    on the screen.&nbsp; See Engine.Console.PostRender for information. </li>
  <li>Engine.Console.PostRender has been moved from C++ to UnrealScript. </li>
  <li>The console now asks the gameinfo object to handle messages before it displays them.
    &nbsp; A GameInfo class can employ DisplayMessages(Canvas C) to paint messages instead of
    the default Console. </li>
  <li>There are now weapon based death messages.&nbsp; Weapon deathmessages are coded strings
    that take the form: <br>
    <br>
    &nbsp;&nbsp;&nbsp; %k killed %v with the %w. </li>
  <li>%k is replaced with the killer's name. </li>
  <li>%o is replaced with the victim's name. </li>
  <li>%w is replaced with the killer's weapons name. </li>
  <li>The actual order of the % codes in the deathmessage is irrelevant. </li>
</ul>

<h4>Scoreboard</h4>

<ul>
  <li>The scoreboard has been rewritten to take advantage of PlayerReplicationInfo.&nbsp; It
    will now obtain score information as it is replicated by each client. </li>
</ul>

<h4>Menus</h4>

<ul>
  <li>Fixed several localization problems with menus, including support for localized yes/no
    characters. </li>
  <li>The menus have been restructured to increase code reuse. </li>
  <li>New functions for fading in strings of text are available in UnrealShortMenu. </li>
</ul>

<h4>Artificial Intelligence</h4>

<ul>
  <li>The VisNoReachPaths[] array in NavigationPoint provides a list of NavigationPoints which
    are visible but not directly reachable from the current NavigationPoint. </li>
  <li>The NavigationPoint function DescribeSpec() is now a useful way of getting information
    about a reachspec ( which describes the conditions for movement between two actors). </li>
  <li>The RouteCache[] array in Pawn provides a list of the NavigationPoints along the best
    path determined by the most recent FindPathTo() or FindPathToward() call.&nbsp; The first
    NavigationPoint is the one returned by the function call, followed by the successive
    waypoints toward the goal.</li>
</ul>

<h4>Actor features</h4>

<ul>
  <li>TransientSoundRadius is a new Actor attribute which specifies the default radius for
    sounds played by a given actor using PlaySound() </li>
  <li>ConsoleCommand() intrinsic function implemented for Actor, allowing scripts to call
    console commands even when there is no local playerpawn (e.g. a dedicated server). </li>
  <li>FellOutOfWorld() is a new event called by the physics if a falling actor's location
    becomes invalid (outside of the level). </li>
  <li>intrinsic final function string[64] GetNextInt( string[64] ClassName, int Num); </li>
  <li>Use bGameRelevant to specify if an actor class is always relevant for a given game. </li>
  <li>When an actor becomes the ViewTarget of a player, its BecomeViewTarget() function is
    called. </li>
  <li>The string representation of actors now includes their package prefix, i.e.
    &quot;Engine.PlayerPawn&quot; rather than &quot;PlayerPawn&quot;.&nbsp; The GetItemName()
    function returns the a string with the package prefixes removed. </li>
</ul>

<h4>GameInfo features</h4>

<ul>
  <li>The localized GameInfo attribute GameName contains a human readable string
    representation of the game type's name. </li>
  <li>The GameInfo function PlayerJumpZScaling() is used to modify the player's jumping
    ability for a specific game type. </li>
  <li>The GameSpy protocol code now calls GameInfo GetRules() to ask for gametype specific
    rules that should be sent to the querying client.&nbsp; This will allow mod authors to add
    new fields to GameSpy.&nbsp; For more information, see GetRules() and the GameSpy Open
    Protocol guide. </li>
  <li>GameInfo information that is regularly replicated to the client has been consolidated
    within a GameReplicationInfo class.&nbsp; This class contains information regarding the
    server's administrator, gamespy information, message of the day information, and so forth.
    &nbsp; Much of this information is configurable from Advanced Options. </li>
</ul>

<h4>Pawn features</h4>

<ul>
  <li>Pawn information that is regularly replicated to the client has been consolidated within
    PlayerReplicationInfo.&nbsp; All bots and human players have a related
    PlayerReplicationInfo class.&nbsp; This contains information such as the player's name,
    score and so forth.&nbsp; All PlayerReplicationInfo classes are bAlwaysRelevant to all
    clients.&nbsp; This means that each client in a netgame has a subset of information
    regarding all players in the game.&nbsp; (Used in scoreboard and enhanced HUDs.) </li>
  <li>The bIsHuman attribute of pawns specifies whether a pawn class should be considered
    human (for game types which care about whether a pawn is human or not). </li>
  <li>The localized Pawn attributes MenuName and NameArticle contain the human readable name
    of the pawn type. </li>
  <li>The UpdateURL() function updates the current URL with the new option and value, and
    optionally also updates the saved DefaultPlayer config. </li>
  <li>The ClientInstantFlash() can be used to cause a one frame screen flash. </li>
  <li>The Sniper rifle zoom has been moved to PlayerPawn.&nbsp; StartZoom() begins a zoom,
    StopZoom() stops zooming, and EndZoom() unzooms. </li>
  <li>The PlayerRestartState attribute specifies the initial state for players when they enter
    a level or restart after dying.. </li>
</ul>

<h4>Inventory features</h4>

<ul>
  <li>The localized Inventory attributes ItemName and ItemArticle contain the human readable
    name of the inventory type. </li>
  <li>The ProjectileClass and AltProjectileClass attributes are now configurable.</li>
</ul>

<h3>C++ Changes And Improvements</h3>

<h4>Localization Support</h4>

<p>I'm incrementally adding support for Unicode to the engine.&nbsp; The TCHAR definition
is CHAR when compiling in ANSI mode, and WORD when compiling in Unicode mode.&nbsp; The
TEXT(&quot;str&quot;) macro emits a string either in Unicode or ANSI depending on the
compilation mode.&nbsp; See UnBuild.h for various Unicode-related definitions.
&nbsp;&nbsp; Unreal doesn't yet run successfully under Unicode yet, because the string
serialization needs improving, and Windows calls need to thunk down to ANSI on Win95/98,
and UFont objects don't support multiple pages yet.&nbsp; We expect full Unicode support
to come together over the coming months.</p>

<h4>Cleanup of Core</h4>

<p>I'm improving the portability of the code by more cleanly separating functions with
dependencies on the ANSI C library (in UnFile.cpp) and Windows (in UnPlat.cpp).</p>

<h4>Multiple player configurations</h4>

<p>Separating User.ini out of Unreal.ini is the first step in evolving Unreal towards
supporting multiple player configurations.&nbsp; The goal is to eventually allow storing
mutiple users' settings by name.</p>

<h1>End</h1>
</body>
</html>
